buildscript {

	ext{
		springBootVersion = '1.5.3.RELEASE'
	}
	repositories {
		maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}

}

allprojects {
	repositories {
		maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
		jcenter()
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'


version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {

	maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
}

configurations {
    mybatisGenerator
}

bootRun {
	//addResources = true
}

dependencies {
	compile('org.apache.directory.studio:org.dom4j.dom4j:1.6.1')
	compile('org.springframework.boot:spring-boot-starter-data-redis')
	compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.0')
	compile('org.springframework.boot:spring-boot-starter-web')
	providedRuntime ('org.springframework.boot:spring-boot-starter-tomcat')
	compile('io.springfox:springfox-swagger2:2.2.2')
	compile('io.springfox:springfox-swagger-ui:2.2.2')
	compile('org.apache.httpcomponents:httpclient:4.5.2')
	compile('com.alibaba:fastjson:1.2.28')
	compile('net.sf.json-lib:json-lib:2.4:jdk15')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	runtime('org.objenesis:objenesis:1.2')
	compile('com.dyuproject.protostuff:protostuff-core:1.1.1')
	compile('com.dyuproject.protostuff:protostuff-runtime:1.1.1')
	mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.5'
	mybatisGenerator 'mysql:mysql-connector-java:5.1.40'
	mybatisGenerator 'tk.mybatis:mapper:3.3.9'
	runtime('mysql:mysql-connector-java')
	compile('com.alibaba:druid:1.0.14')
	compile('com.github.pagehelper:pagehelper:4.1.6')
	compile('org.apache.commons:commons-lang3:3.4')
	compile('org.projectlombok:lombok')
	compile('com.google.code.gson:gson:2.2.2')
	compile('commons-fileupload:commons-fileupload:1.3.1')
	compile('javax:javaee-api:7.0')
	compile "joda-time:joda-time:2.2"
	compile('org.jaxen:com.springsource.org.jaxen:1.1.1')
	compile("org.springframework.boot:spring-boot-devtools")
	compile('com.squareup.okhttp3:okhttp:3.4.1')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
	compile('cn.jpush.api:jpush-client:3.2.18')
	compile('cn.jpush.api:jiguang-common:1.0.5')
}

task wrapper(type:Wrapper) {
	gradleVersion='1.8'
}


def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/db-mysql.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties;
}

task mybatisGenerate << {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['userId'] = properties.getProperty("jdbc.user")
    ant.properties['password'] = properties.getProperty("jdbc.pass")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = properties.getProperty("package.model")
    ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
    ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}